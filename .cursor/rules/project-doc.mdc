---
description: LedDeviceCloudPlatform 项目介绍
globs:
alwaysApply: true
---

# LedDeviceCloudPlatform 项目介绍

## 项目概述

**LedDeviceCloudPlatform** 是一个物联网 LED 设备控制平台，采用微服务架构实现远程设备管理和控制。项目整体基于 Spring Boot 和 Spring Cloud 技术栈，划分为多个独立服务模块，包括认证服务（Auth-Server）、网关服务（Gateway）、核心业务服务（Core-Service）以及公共模块（Common-Basic 和 Common-Web）等。各服务通过 Spring Cloud Alibaba **Nacos** 注册中心进行服务发现和配置管理，实现松耦合的微服务架构。关键技术栈如下：

**微服务架构**：采用 Spring Cloud 2023 版本构建，服务划分清晰。各服务通过 Nacos 注册中心注册和发现，实现负载均衡和服务调用。公共模块提供基础工具和Web通用功能（如日志、Feign客户端等）。

**Auth-Server 认证服务**：负责用户身份验证和 OAuth2 授权，基于 Spring Authorization Server 构建（详见下节）。采用 MyBatis-Plus 访问 MySQL 数据库存储用户、权限等数据。集成 Spring Security 进行安全控制。

**Core-Service 核心服务**：提供LED设备的业务功能（如设备信息管理、指令下发等）。通过 Feign 调用或直接由网关转发请求。核心服务也引入 Casbin 权限控制和 OpenAPI 接口文档支持。

**Gateway 网关服务**：整个系统的统一入口，基于 Spring Cloud Gateway 搭建。网关负责路由转发、统一鉴权、安全过滤等（详见下节）。Gateway 注册为独立服务，统一接收客户端请求并分发到内部各微服务。

**配置与监控**：使用 Nacos Config 作为配置中心，将各服务配置集中管理并支持热刷新。使用 Spring Boot Actuator 监控服务健康。引入 Spring Cloud OpenFeign 实现服务间的REST调用；集成 Zipkin（Brave）链路追踪以监控分布式调用。

上述架构使各模块职责清晰、易于扩展。例如，Auth-Server 专注认证授权，Core-Service 专注设备业务逻辑，Gateway 则提供统一入口和横切功能。通过网关聚合微服务，前端只需面对单一网关地址而无须关注内部服务细节。

## 核心组件说明

### Auth-Server（统一认证服务）

独立部署的认证服务器，基于OAuth2+OIDC标准实现：

​              ● 提供云平台统一SSO单点登录能力/SLO单点登出能力

​              ● 支持第三方系统接入与二次开发

​              ● 允许第三方平台账号登录云平台

​              ● 支持授权码模式/PCKE模式/客户端模式

​              ● 使用JWT格式签发access_token/refresh_token/id_token	

### Gateway（网关服务）

作为流量入口，负责请求路由和安全控制。一方面，根据域名/路径将请求转发至相应后端服务；另一方面，网关接入并验证OAuth2访问令牌，将令牌转换为JWT并关联用户与权限信息，进行作用域检查后再转发请求。

​              ● 作为访问云平台资源的门户网关，为OAuth2客户端

​              ● 实现OAuth2Login流程，支持OIDC

​              ● 作为资源服务器使用casbin验证所有资源请求的权限（RBAC，细化到接口级）

​              ● 同时支持Cookie和Bearer Token认证方式

​              ● 属于机密服务，不会对前端暴露access_token，由Gateway来代理实现所有OAuth2相关操作。

### Core-Service及其他Service（后端业务服务）

后端微服务聚合层和领域服务层，执行业务逻辑。为无状态服务，依赖网关转发的JWT令牌获取用户身份和权限信息。

​              ● 提供云平台各功能实现

​              ● 无安全配置，依赖网关层提供安全保障

​              ● 不对外暴露端口，只接受来自Gateway的请求

### 前端客户端

承载用户界面或客户端应用，负责发起认证授权请求或业务请求。

​              ● 对于云平台自有的前端页面(xxx.colorlightclou.com)，由Gateway网关来承担OAuth2客户端的职责，通过浏览器重定向来完成认证，通过set-Cookie来实现授权。所有的协议方面工作由Gateway负责。

​              ● 其他前端交互应用，如移动App、桌面应用等由于不能安全保管客户端密钥，使用PKCE模式。

## 认证与授权流程

### 云平台登录流程详解

云平台的用户登录过程基于OAuth2授权码模式。在未登录时，用户向前端发起请求，网关检测发现无有效认证凭证，便构造认证授权请求URL并重定向用户到认证服务器（Auth-Server）的登录页面。用户在登录页输入凭证完成认证后，剩下的流程由Gateway代理，并由Gateway管理登录状态。



**典型流程**

​            1.     **客户端请求网关** – 未认证时，网关返回一个包含授权码请求的重定向链接。

​            2.     **用户登录认证中心** – 浏览器跳转到Auth-Server登录页，用户输入账号密码。

​            3.     **颁发授权码** – 登录成功后，Auth-Server通过302重定向携带code参数，将用户带回网关。

​            4.     **交换令牌** – 网关后台使用授权码向Auth-Server请求访问令牌。

​            5.     **返回令牌并建立会话** – Auth-Server返回Access Token（JWT）和ID Token，网关将令牌存入**Session**，之后通知前端登录成功，更换**Cookie**并set-Cookie。

​            6.     **重放原始请求** – 前端收到登录成功信号后，重新发送最初的业务请求，此次请求会携带刚设置的**Cookie**。

​            7.     **令牌校验** – 网关拦截此请求，提取并校验**Cookie/Session（**对前端来说是Cookie，后端进行JWT的转换**）**。它调用Auth-Server进行令牌校验，将用户身份与权限信息封装到新的JWT令牌中。

​            8.     **Casbin校验** - 获取用户信息，并通过Casbin **RBAC**模型校验是否满足目标API的权限要求。若校验通过，网关将请求转发到后端服务。



## Thymeleaf 暂时代替界面的作用与迁移

目前项目在后端使用了 **Thymeleaf** 模板引擎来渲染部分网页界面，主要是为了在前端开发完成之前提供简易的页面以进行功能验证和演示。例如：

- **登录页面**：Auth-Server 使用 Thymeleaf 模板提供了用户登录页面。用户访问需要授权的资源时会被重定向到该页面进行登录，这是 Spring Security 默认流程的一部分。通过服务器端模板渲染登录表单，开发团队可以在前端尚未完成时仍然测试认证流程。Auth-Server 模块引入了 `spring-boot-starter-thymeleaf` 依赖即表明其包含服务端页面渲染能力，用于输出登录/授权相关的HTML页面。
- **临时管理页面**：Gateway 服务也引入了 Thymeleaf 依赖。这意味着 Gateway 可以直接渲染一些简单的服务端页面，例如一个临时的首页或接口测试页面。可能在开发阶段，Gateway 提供了一个基本的管理界面（例如设备列表查看页面），方便在无前端情况下直接通过浏览器访问进行调试。这些页面同样通过 Thymeleaf 模板生成，在服务端整合数据后返回给浏览器。

Thymeleaf 的引入在开发初期加速了调试和演示，但从架构上看，**最终方案是前后端分离**。因此后期需要将 Thymeleaf 渲染的界面逐步替换为前端工程的页面，由前端直接通过调用后端 API 获取数据进行渲染。具体迁移建议：

- **登录界面迁移**：当前端应用（例如SPA或移动端）准备好后，应使用前端自己的页面提供登录表单，并通过调用 Auth-Server 的OAuth2接口来完成认证获取令牌。即前端直接提交用户名/密码到后端的登录API（或走授权码流程），而不再使用后端返回的HTML表单页面。Auth-Server 可保持OAuth2协议接口不变，前端通过AJAX或重定向完成认证流程。完成后，可关闭后端 Thymeleaf 登录页的访问（或仅保留为后备）。
- **业务页面迁移**：对于目前Gateway可能提供的临时管理界面，例如设备监控页，应该迁移到由前端项目实现。前端通过调用 Core-Service 提供的 REST API 获取设备数据，在浏览器渲染展示。后端不再直接输出HTML，而仅返回JSON数据。为了实现这一点，需要前端开发对应的页面，并确保后端已经提供完善的API接口（根据需要可能已经有 OpenAPI 文档支持，前端可以据此对接）。当前端页面部署后，可移除 Gateway 中针对这些页面的 Thymeleaf 模板和路由，仅保留必要的API接口。
- **模板依赖移除**：最终，当所有界面均由前端实现后，后端可以去除 `spring-boot-starter-thymeleaf` 依赖以及相关的 Controller 和模板视图。这将精简后端应用，只保留纯粹的 REST API 服务。届时，Auth-Server 的职责也可仅限于提供OAuth2授权服务（返回JSON或重定向URI给前端），不再渲染任何视图。Gateway 也仅作为API网关，不返回HTML页面。所有UI交互均在前端完成。

通过以上迁移，系统将实现真正的前后端分离：前端负责界面与交互，后端专注提供数据与服务。这使得前端可以采用更丰富的技术栈和提升用户体验，而后端服务也更简洁、高内聚。同时，安全方面仍由后端把控——前端获取令牌后每次调API都带上，它依然经过网关和各服务的验证与权限控制，只是流程上不再依赖服务端模板渲染。这种演进符合现代 web 架构最佳实践，也是本项目规划的方向。

**总结**：LedDeviceCloudPlatform 项目采用了微服务+OAuth2的后端架构，在开发初期以 Thymeleaf 临时提供必要的界面支持。随着前端开发完成，推荐逐步取消后端页面渲染，让前端通过调用后端开放的REST API来实现相同功能。这样既保留了后端完善的安全与业务逻辑支持（OAuth2认证、Gateway网关、安全过滤等），又充分发挥前端的灵活展示能力，最终形成前后端解耦、接口清晰、安全可靠的物联网设备云控制平台。